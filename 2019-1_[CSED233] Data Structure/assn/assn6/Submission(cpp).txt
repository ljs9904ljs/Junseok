#include<iostream>

using namespace std;
#define MAX_SIZE 100

struct pq_element {
	int prioirty;
	int value;
};

class heap_priority_queue{
private:
	pq_element heap[MAX_SIZE];
	/* BEGIN_YOUR_CODE */

	/* END_YOUR_CODE */
public:
	heap_priority_queue() {
		size = 0;
	}
	
	/* BEGIN_YOUR_CODE */
	bool insert(int prioirty, int value) { } // insert element
	/* END_YOUR_CODE */

	/* BEGIN_YOUR_CODE */
	bool removeMax() { } // remove a pq_element having maximum prioirty
	/* END_YOUR_CODE */

	/* BEGIN_YOUR_CODE */
	pq_element max() { } // return a pq_element having maximum prioirty
	/* END_YOUR_CODE */

	/* BEGIN_YOUR_CODE */
	bool empty() { } // is it empty?
	/* END_YOUR_CODE */
};

int main(int argc, char** argv) {
	int N;
	cin >> N; // the number of elements to insert in priority queue

	heap_priority_queue pq;

	for (int i=0; i < N; ++i) {
		int value, priority;
		cin >> priority >> value;
		pq.insert(priority, value);
	}

	while (!pq.empty()) {
		cout << pq.max().value << " ";
		pq.removeMax();
	}

	return 0;
}